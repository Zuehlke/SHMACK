// Note: "common.gradle" in the root project contains additional initialization
//   for this project. This initialization is applied in the "build.gradle"
//   of the root project.

// Note however, that you may define your own "run" and "debug" task if you
// prefer. In this case NetBeans will not add these tasks but you may rely on
// your own implementation.
if (!hasProperty('mainClass')) {
    ext.mainClass = ''
}

sourceCompatibility = 1.7

configurations {
    provided
    compile.extendsFrom provided
}

dependencies {
	provided 'org.apache.spark:spark-core_2.11:1.5.1'

    compile 'org.twitter4j:twitter4j-stream:4.0.4'
    compile 'org.twitter4j:twitter4j-async:4.0.4'
    
	compile 'com.google.guava:guava:18.0'
	compile 'commons-io:commons-io:2.4'
	compile 'org.apache.commons:commons-exec:1.3'
	
    compile group: 'org.slf4j', name: 'slf4j-api', version: '1.7.+'
    compile group: 'ch.qos.logback', name: 'logback-classic', version: '1.+'
}

task fatJar(type: Jar) {
    baseName = project.name + '-all'
    from { configurations.testCompile.collect { it.isDirectory() ? it : zipTree(it) } }
    with jar
}

// taken from http://kennethjorgensen.com/blog/2014/fat-jars-with-excluded-dependencies-in-gradle
// see also https://discuss.gradle.org/t/removing-dependencies-from-a-jar-file-during-jar-task/5521
// https://discuss.gradle.org/t/excluding-some-dependencies-when-building-fat-jar/4562
task fatJarWithTests(type: Jar) {
    baseName = project.name + '-all-with-tests'
    //from { configurations.testCompile.collect { it.isDirectory() ? it : zipTree(it) } }
    
    from {
        (configurations.testCompile - configurations.provided).collect {
            it.isDirectory() ? it : zipTree(it)
        }
    }
    from sourceSets.test.output
    with jar
}