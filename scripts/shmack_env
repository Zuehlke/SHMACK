# This environment has to be sourced by all public scripts.
# It defines paths to files which are shared among scripts.

###################################################################################################
########  Change the following variables to adjust your stack if needed
###################################################################################################

# the SSH keypair .pem file created in AWS Console to access your running instances
KEY_PAIR_NAME="shmack-key-pair-01"

# A single public slave is sufficient and keeps costs down 
# when not running in production or testing fault tolerance  
PUBLIC_SLAVE_INSTANCE_COUNT=1

# Name of your stack in CloudFormation - mainly helps when several are running to know which is which and not delete the wrong one.
STACK_NAME="MyShmackStack-1"

# Mesosphere CloudFormation template for operating DCOS on AWS
OFFICIAL_TEMPLATE_URL="https://s3.amazonaws.com/downloads.mesosphere.io/dcos/stable/cloudformation/single-master.cloudformation.json"
TEMPLATE_URL="${OFFICIAL_TEMPLATE_URL}"

# Customized template to define the instance types to use
#TEMPLATE_URL="https://s3-us-west-1.amazonaws.com/shmack/single-master.cloudformation.json"
# Customized template using spot prices for all the worker nodes / slaves
#TEMPLATE_URL="https://s3-us-west-1.amazonaws.com/shmack/single-master.cloudformation.spot.json"

# Instance type as defined in https://aws.amazon.com/ec2/pricing/ used for all worker nodes / slaves
# Default is m3.xlarge, which should remain the lowest setting.
# Other options could be m3.2xlarge with same number of nodes but a bit more "beefy",
# or the corresponding c3 or r3 instances, depending if you need more computing power (c3) or memory (r3).
SLAVE_INSTANCE_TYPE="m3.xlarge"
#SLAVE_INSTANCE_TYPE="r3.2xlarge"

# When using spot instances, how much are you willing to pay per instance at most.
# It is a spot market and you will only be paying enough to outbid other users - or your instances will get down of others outbid you.
# Depends also on the instances you are using.
#   See https://aws.amazon.com/ec2/pricing/ in your region (us-west-1 = US West (Northern California)
#   and https://us-west-1.console.aws.amazon.com/ec2sp/v1/spot/dashboard to get the pricing history
# The lowest setting, m3.xlarge on-demand price is $0.308, spot prices are usually below 0.1 $/hour, but have frequent spikes up to 2$/hour.
# For m3.2xlarge, on-demand price is $0.616/hour for instance, prices are usually below 0.2 $/hour, but have frequent spikes up to 3$/hour.
# While r3.2xlarge with more memory, on-demand price is $0.741/hour, spot prices are usually slightly above 0.2 $/hour but have spikes only to 1.5$/hour.
# Setting a high value will make it more likely that you can reliably use your cluster, but may create also high peak prices.
# When in doubt: If you just go with regular on-demand prices, you are certain to get and keep your cluster running.
MAX_SPOT_INSTANCE_PRICE="0.1"


###################################################################################################
########  NOTHING to change below this line (no hardcoded values)
###################################################################################################


if [ -f "./shmack_env" ] ; then
  export SCRIPTS_DIR=`pwd`
else 
  echo "Scripts must ALWAYS be executed with correct current directory, i.e. directory of 'shmack_env'"
  exit 99
fi

set -o pipefail

function run {
    "$@"
    local status=$?
    if [ $status -ne 0 ]; then
        echo "Failed to execute $*" >&2
	kill -9 $$ >> /dev/null
    fi
    return $status
}
export -f run

export SSH_KEY_LOCATION=${HOME}/.ssh/${KEY_PAIR_NAME}.pem

export TARGET_DIR=${SCRIPTS_DIR}/target

export TMP_OUTPUT_DIR=${TARGET_DIR}/tmp-output

export CURRENT_STATE_DIR=${TARGET_DIR}/current-state
export CURRENT_STATE_DIR_RELATIVE=target/current-state
export STATE_TAR_FILE=stack-state.tgz

export CURRENT_STACK_ID_FILE=${CURRENT_STATE_DIR}/StackId
export CURRENT_STACK_NAME_FILE=${CURRENT_STATE_DIR}/StackName
export CURRENT_MESOS_MASTER_DNS_FILE=${CURRENT_STATE_DIR}/MesosMasterDnsAddress
export CURRENT_PUBLIC_SLAVE_DNS_FILE=${CURRENT_STATE_DIR}/PublicSlaveDnsAddress
export CURRENT_PUBLIC_SLAVE_SECGROUP_FILE=${CURRENT_STATE_DIR}/PublicSlavesSecurityGroup
export CURRENT_PUBLIC_SLAVE_DNS_NAME_FILE=${CURRENT_STATE_DIR}/PublicSlaveDnsName

export CURRENT_MASTER_NODE_SSH_IP_ADDRESS_FILE=${CURRENT_STATE_DIR}/MasterNodeSshIpAddress
export CURRENT_NODE_INFO_FILE=${CURRENT_STATE_DIR}/NodeInfo.json

export CURRENT_STACK_INSTALL_PACKAGES_FILE=${CURRENT_STATE_DIR}/InstallPackeges
export CURRENT_STACK_OPTIONAL_PACKAGES_FILE=${CURRENT_STATE_DIR}/OptionalPackeges
export CURRENT_STACK_INSTALL_APPS_FILE=${CURRENT_STATE_DIR}/InstallApps
export CURRENT_STACK_OPTIONAL_APPS_FILE=${CURRENT_STATE_DIR}/OptionalApps


PATH=${SCRIPTS_DIR}:${SCRIPTS_DIR}/helpers:${PATH}
export PATH

# taken from http://rabexc.org/posts/pitfalls-of-ssh-agents
# see also http://stackoverflow.com/questions/5527068/how-do-you-use-an-identity-file-with-rsync
function setup-ssh-agent {
	ssh-add ${SSH_KEY_LOCATION} &>/dev/null
	if [ "$?" -ne 0 ]; then
	  test -r ~/.ssh-agent && \
	    eval "$(<~/.ssh-agent)" >/dev/null

	  ssh-add ${SSH_KEY_LOCATION} &>/dev/null
	  if [ "$?" -ne 0 ]; then
	    (umask 066; ssh-agent > ~/.ssh-agent)
	    eval "$(<~/.ssh-agent)" >/dev/null
            ssh-add ${SSH_KEY_LOCATION}
 	    echo "Added SSH-Key to ssh-agent."
	  fi
	fi
}

if [ -e "${SSH_KEY_LOCATION}" ]
	then
		setup-ssh-agent
fi

# AWS::IAM::AccessKey, AWS::IAM::InstanceProfile, AWS::IAM::Role, AWS::IAM::User
TEMPLATE_PARAMETERS=" ParameterKey=AcceptEULA,ParameterValue=Yes"
TEMPLATE_PARAMETERS="${TEMPLATE_PARAMETERS} ParameterKey=KeyName,ParameterValue=${KEY_PAIR_NAME}"
TEMPLATE_PARAMETERS="${TEMPLATE_PARAMETERS} ParameterKey=PublicSlaveInstanceCount,ParameterValue=${PUBLIC_SLAVE_INSTANCE_COUNT}"

if [ "${OFFICIAL_TEMPLATE_URL}Unchanged" != "${TEMPLATE_URL}Unchanged" ]
	then
		TEMPLATE_PARAMETERS="${TEMPLATE_PARAMETERS} ParameterKey=MasterInstanceType,ParameterValue=${SLAVE_INSTANCE_TYPE} ParameterKey=SlaveInstanceType,ParameterValue=${SLAVE_INSTANCE_TYPE}  ParameterKey=PublicSlaveInstanceType,ParameterValue=${SLAVE_INSTANCE_TYPE} ParameterKey=SpotInstancePrice,ParameterValue=${MAX_SPOT_INSTANCE_PRICE} "
fi

export TEMPLATE_PARAMETERS
